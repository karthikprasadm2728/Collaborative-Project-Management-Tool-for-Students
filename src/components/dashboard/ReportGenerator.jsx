import React, { useState } from 'react';
import jsPDF from 'jspdf';

const ReportGenerator = () => {
  const [formData, setFormData] = useState({
    subject: '',
    topic: '',
    teamMembers: '',
    status: '',
    challenges: '',
    nextSteps: '',
    priority: '',
    date: '',
    client: '',
    summary: '',
  });

  const [aiSummary, setAiSummary] = useState(''); // Placeholder for AI-generated summary

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  // Simulate AI summary generation
  const generateAISummary = () => {
    setAiSummary(`AI-Generated Summary: This project on ${formData.subject} has been progressing steadily with a team of ${formData.teamMembers}. The current status is ${formData.status}.`);
  };

  const generatePDF = () => {
    const doc = new jsPDF();
  
    // Use a simpler, widely supported font like Helvetica
    doc.setFont("helvetica", "normal");
  
    // Title (Large and Bold)
    doc.setFontSize(24);
    doc.setFont("helvetica", "bold");
    doc.text('Project Report', 14, 20);
  
    // Add spacing between title and content
    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
  
    // Date and Priority
    doc.text(`Date: ${formData.date || 'N/A'}`, 14, 30);
    doc.text(`Priority: ${formData.priority || 'N/A'}`, 14, 36);
    doc.text(`Client: ${formData.client || 'N/A'}`, 14, 42);
  
    // Separator Line
    doc.setLineWidth(0.5);
    doc.line(14, 45, 200, 45);
  
    // Adjusted Section Spacing
    let yOffset = 55;
    const sectionSpacing = 10;
  
    // Helper function for sections
    const addSection = (label, content) => {
      doc.setFont("helvetica", "bold");
      doc.text(`${label}:`, 14, yOffset);
      yOffset += sectionSpacing;
      doc.setFont("helvetica", "normal");
  
      const lines = doc.splitTextToSize(content || 'N/A', 180);
      doc.text(lines, 14, yOffset);
      yOffset += lines.length * 6; // Adjust yOffset based on line count
    };
  
    // Add all fields
    addSection('Subject', formData.subject);
    addSection('Topic', formData.topic);
    addSection('Team Members', formData.teamMembers);
    addSection('Status', formData.status);
    addSection('Challenges', formData.challenges);
    addSection('Next Steps', formData.nextSteps);
  
    // Summary (combined)
    let summaryText = '';
    if (formData.summary.trim()) {
      summaryText += `User Summary: ${formData.summary.trim()}\n\n`;
    }
    if (aiSummary.trim()) {
      summaryText += `${aiSummary.trim()}`;
    }
    if (!summaryText) {
      summaryText = 'N/A';
    }
  
    addSection('Summary', summaryText);
  
    // Footer with page number
    doc.setFontSize(8);
    doc.text('Generated by Project Report Generator', 14, 290);
    doc.text(`Page ${doc.internal.getNumberOfPages()}`, 200, 290);
  
    // Save the PDF
    doc.save('project_report.pdf');
  };

  const goBack = () => {
    window.history.back(); // Navigate back to the previous page
  };

  return (
    <div className="container">
      <div className="form-container">
        <h1 className="title">üìù Project Report Generator</h1>

        <button onClick={goBack} className="go-back-btn">üîô Go Back</button>

        <div className="input-fields">
          <br></br>
          <input
            type="text"
            name="subject"
            placeholder="Project Subject"
            value={formData.subject}
            onChange={handleChange}
            className="input-field"
          />
          <input
            type="text"
            name="topic"
            placeholder="Topic/Module"
            value={formData.topic}
            onChange={handleChange}
            className="input-field"
          />
          <input
            type="text"
            name="teamMembers"
            placeholder="Team Members (comma-separated)"
            value={formData.teamMembers}
            onChange={handleChange}
            className="input-field"
          />
          <input
            type="text"
            name="status"
            placeholder="Status (e.g., On Track)"
            value={formData.status}
            onChange={handleChange}
            className="input-field"
          />
          <textarea
            name="challenges"
            placeholder="Challenges Faced"
            value={formData.challenges}
            onChange={handleChange}
            className="input-field"
          />
          <textarea
            name="nextSteps"
            placeholder="Next Steps"
            value={formData.nextSteps}
            onChange={handleChange}
            className="input-field"
          />
          <input
            type="text"
            name="priority"
            placeholder="Priority (e.g., High, Medium, Low)"
            value={formData.priority}
            onChange={handleChange}
            className="input-field"
          />
          <input
            type="date"
            name="date"
            value={formData.date}
            onChange={handleChange}
            className="input-field"
          />
          <input
            type="text"
            name="client"
            placeholder="Client Name"
            value={formData.client}
            onChange={handleChange}
            className="input-field"
          />
          <textarea
            name="summary"
            placeholder="Project Summary"
            value={formData.summary}
            onChange={handleChange}
            className="input-field"
          />
        </div>

        <div className="ai-section">
          <button onClick={generateAISummary} className="ai-btn">
            üß† Generate AI Summary
          </button>
          {aiSummary && <div className="ai-summary">{aiSummary}</div>}
        </div>

        <button
          onClick={generatePDF}
          className="download-btn"
        >
          üì• Download PDF
        </button>
      </div>
      <style jsx>{`
  .container {
  display: flex;
    justify-content: center;
    align-items: flex-start;
       padding: '2rem',
    maxWidth: '900px',
    margin: '2rem auto',
    background: '#1e1e2f', // Matching the background from calculator
    borderRadius: '12px',
    color: '#ffffff',
    fontFamily: '"Segoe UI", sans-serif',
    boxShadow: '0 4px 20px rgba(0,0,0,0.5)',
  }

  .form-container {
    width: 100%;
    max-width: 900px;
    padding: 40px;
    border-radius: 12px;
    background: #0a1a3b; /* Dark blue box */
    border: 1px solid rgba(255, 255, 255, 0.1);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.6);
    max-height: calc(100vh - 80px);
    overflow-y: auto;
  }

  .title {
    font-size: 2.5rem;
    font-weight: 600;
    color: #ffffff;
    text-align: center;
    margin-bottom: 30px;
    letter-spacing: 2px;
  }

  .input-fields {
    display: grid;
    gap: 20px;
    margin-bottom: 30px;
  }

  .input-field {
    padding: 12px;
    border-radius: 8px;
    border: none;
    background-color: #1e2b4d;
    color: white;
    font-size: 1rem;
  }

  .input-field::placeholder {
    color: #aaa;
  }

  .ai-btn,
  .download-btn,
  .go-back-btn {
    background-color: #3c5aa6;
    color: white;
    padding: 12px 24px;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    cursor: pointer;
    margin: 10px 10px 0 0;
  }

  .ai-btn:hover,
  .download-btn:hover,
  .go-back-btn:hover {
    background-color: #587be0;
  }

  .ai-summary {
    margin-top: 15px;
    padding: 10px;
    background-color: #1e2b4d;
    border-radius: 8px;
    color: #ccc;
  }
`}</style>

      
    </div>
  );
};


export default ReportGenerator;
